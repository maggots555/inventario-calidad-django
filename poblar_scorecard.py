"""
Script para poblar la base de datos con datos iniciales del Score Card
Ejecutar con: python poblar_scorecard.py
"""
import os
import django
import sys
from datetime import datetime, timedelta
import random

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from scorecard.models import CategoriaIncidencia, ComponenteEquipo, Incidencia, EvidenciaIncidencia
from inventario.models import Empleado, Sucursal


def crear_categorias():
    """
    Crea las categor√≠as iniciales de incidencias
    """
    print("üìã Creando categor√≠as de incidencias...")
    
    categorias = [
        {
            'nombre': 'Fallo Post-Reparaci√≥n',
            'descripcion': 'Equipo falla despu√©s de ser reparado y entregado al √°rea de calidad',
            'color': '#dc3545'  # Rojo
        },
        {
            'nombre': 'Defecto No Registrado',
            'descripcion': 'Defectos visibles no registrados durante la inspecci√≥n inicial',
            'color': '#fd7e14'  # Naranja
        },
        {
            'nombre': 'Componente Mal Instalado',
            'descripcion': 'Componente instalado incorrectamente durante la reparaci√≥n',
            'color': '#ffc107'  # Amarillo
        },
        {
            'nombre': 'Limpieza Deficiente',
            'descripcion': 'Equipo entregado sin la limpieza adecuada',
            'color': '#0dcaf0'  # Cian
        },
        {
            'nombre': 'Fallo de Diagn√≥stico',
            'descripcion': 'Diagn√≥stico inicial incorrecto que llev√≥ a reparaci√≥n inadecuada',
            'color': '#6f42c1'  # Morado
        },
        {
            'nombre': 'Da√±o Cosm√©tico',
            'descripcion': 'Da√±o cosm√©tico ocasionado durante el servicio',
            'color': '#d63384'  # Rosa
        },
        {
            'nombre': 'Documentaci√≥n Incompleta',
            'descripcion': 'Falta de documentaci√≥n del servicio realizado',
            'color': '#6c757d'  # Gris
        },
    ]
    
    for cat_data in categorias:
        categoria, created = CategoriaIncidencia.objects.get_or_create(
            nombre=cat_data['nombre'],
            defaults={
                'descripcion': cat_data['descripcion'],
                'color': cat_data['color']
            }
        )
        if created:
            print(f"  ‚úÖ Creada: {categoria.nombre}")
        else:
            print(f"  ‚ÑπÔ∏è  Ya existe: {categoria.nombre}")
    
    print(f"‚úÖ Total de categor√≠as: {CategoriaIncidencia.objects.count()}\n")


def crear_componentes():
    """
    Crea los componentes de equipos
    """
    print("üîß Creando componentes de equipos...")
    
    componentes = [
        # Componentes para todos los tipos
        {'nombre': 'Pantalla', 'tipo': 'todos'},
        {'nombre': 'Teclado', 'tipo': 'laptop'},
        {'nombre': 'Touchpad', 'tipo': 'laptop'},
        {'nombre': 'Mouse', 'tipo': 'pc'},
        {'nombre': 'Teclado USB', 'tipo': 'pc'},
        {'nombre': 'RAM', 'tipo': 'todos'},
        {'nombre': 'Disco Duro / SSD', 'tipo': 'todos'},
        {'nombre': 'Fuente de Poder', 'tipo': 'todos'},
        {'nombre': 'Motherboard', 'tipo': 'todos'},
        {'nombre': 'Procesador (CPU)', 'tipo': 'todos'},
        {'nombre': 'Tarjeta Gr√°fica (GPU)', 'tipo': 'todos'},
        {'nombre': 'Bater√≠a', 'tipo': 'laptop'},
        {'nombre': 'Ventilador / Cooling', 'tipo': 'todos'},
        {'nombre': 'Bisagras', 'tipo': 'laptop'},
        {'nombre': 'Carcasa / Chasis', 'tipo': 'todos'},
        {'nombre': 'Puerto USB', 'tipo': 'todos'},
        {'nombre': 'Puerto HDMI', 'tipo': 'todos'},
        {'nombre': 'Puerto de Red (Ethernet)', 'tipo': 'todos'},
        {'nombre': 'WiFi / Bluetooth', 'tipo': 'todos'},
        {'nombre': 'Webcam', 'tipo': 'todos'},
        {'nombre': 'Micr√≥fono', 'tipo': 'todos'},
        {'nombre': 'Bocinas / Audio', 'tipo': 'todos'},
        {'nombre': 'Lector de Tarjetas', 'tipo': 'todos'},
        {'nombre': 'Sistema Operativo', 'tipo': 'todos'},
    ]
    
    for comp_data in componentes:
        componente, created = ComponenteEquipo.objects.get_or_create(
            nombre=comp_data['nombre'],
            tipo_equipo=comp_data['tipo'],
            defaults={'activo': True}
        )
        if created:
            print(f"  ‚úÖ Creado: {componente.nombre} ({componente.get_tipo_equipo_display()})")
        else:
            print(f"  ‚ÑπÔ∏è  Ya existe: {componente.nombre}")
    
    print(f"‚úÖ Total de componentes: {ComponenteEquipo.objects.count()}\n")


def crear_incidencias_ejemplo():
    """
    Crea algunas incidencias de ejemplo
    """
    print("üìä Creando incidencias de ejemplo...")
    
    # Verificar que existan empleados y sucursales
    if Empleado.objects.count() == 0:
        print("‚ö†Ô∏è  No hay empleados en la base de datos.")
        print("   Ejecuta primero: python poblar_sistema.py")
        return
    
    if Sucursal.objects.count() == 0:
        print("‚ö†Ô∏è  No hay sucursales en la base de datos.")
        print("   Ejecuta primero: python poblar_sistema.py")
        return
    
    if CategoriaIncidencia.objects.count() == 0:
        print("‚ö†Ô∏è  No hay categor√≠as creadas.")
        return
    
    # Obtener datos necesarios
    empleados = list(Empleado.objects.all())
    sucursales = list(Sucursal.objects.all())
    categorias = list(CategoriaIncidencia.objects.all())
    componentes = list(ComponenteEquipo.objects.all())
    
    # Datos de ejemplo
    marcas = ['HP', 'Dell', 'Lenovo', 'Acer', 'ASUS', 'Toshiba']
    tipos_equipo = ['pc', 'laptop', 'aio']
    severidades = ['critico', 'alto', 'medio', 'bajo']
    estados = ['abierta', 'en_revision', 'cerrada']
    categorias_fallo = ['hardware', 'software', 'cosmetico', 'funcional']
    
    descripciones_ejemplo = [
        "Equipo presenta fallo en el componente despu√©s de la reparaci√≥n. Cliente reporta problema al recibir.",
        "Durante inspecci√≥n de calidad se detect√≥ defecto que no fue registrado en la recepci√≥n inicial.",
        "Componente instalado presenta holgura o no est√° correctamente conectado.",
        "Se detectaron residuos de pasta t√©rmica y polvo en el equipo entregado.",
        "El diagn√≥stico inicial no identific√≥ correctamente el problema, requiriendo re-trabajo.",
        "Se observan rayones o marcas en la carcasa que no estaban previos al servicio.",
        "Falta documentaci√≥n completa del trabajo realizado en el equipo.",
        "Puerto USB qued√≥ suelto despu√©s del servicio de mantenimiento.",
        "Pantalla presenta manchas despu√©s de la limpieza.",
        "Sistema operativo no arranca correctamente despu√©s de la instalaci√≥n.",
    ]
    
    acciones_ejemplo = [
        "Se realiz√≥ nueva reparaci√≥n del componente afectado. Equipo probado durante 2 horas.",
        "Se registr√≥ el defecto en sistema y se notific√≥ al √°rea de recepci√≥n para reforzar inspecci√≥n.",
        "Se reinstalaron correctamente todos los componentes y se verific√≥ estabilidad.",
        "Se realiz√≥ limpieza profunda adicional seg√∫n protocolo de calidad.",
        "Se actualiz√≥ proceso de diagn√≥stico y se capacit√≥ al t√©cnico responsable.",
        "Se realiz√≥ pulido superficial y se document√≥ para prevenir futuros incidentes.",
        "Se complet√≥ documentaci√≥n faltante y se actualiz√≥ checklist de entrega.",
        "Se reemplaz√≥ puerto USB y se reforz√≥ fijaci√≥n interna.",
        "Se limpi√≥ pantalla con productos especializados y se verific√≥ ausencia de marcas.",
        "Se reinstal√≥ sistema operativo desde cero y se verific√≥ funcionamiento completo.",
    ]
    
    # Crear 15 incidencias de ejemplo
    num_incidencias = 15
    
    for i in range(num_incidencias):
        # Fecha aleatoria en los √∫ltimos 3 meses
        dias_atras = random.randint(0, 90)
        fecha_deteccion = datetime.now().date() - timedelta(days=dias_atras)
        
        # Seleccionar datos aleatorios
        tipo_equipo = random.choice(tipos_equipo)
        marca = random.choice(marcas)
        numero_serie = f"SN{random.randint(10000000, 99999999)}"
        sucursal = random.choice(sucursales)
        tecnico = random.choice(empleados)
        inspector = random.choice([e for e in empleados if e != tecnico])  # Diferente al t√©cnico
        categoria = random.choice(categorias)
        componente = random.choice([c for c in componentes if c.tipo_equipo in [tipo_equipo, 'todos']])
        severidad = random.choice(severidades)
        estado = random.choice(estados)
        
        try:
            incidencia = Incidencia.objects.create(
                fecha_deteccion=fecha_deteccion,
                tipo_equipo=tipo_equipo,
                marca=marca,
                modelo=f"Modelo-{random.randint(100, 999)}",
                numero_serie=numero_serie,
                servicio_realizado=f"Reparaci√≥n de {componente.nombre}",
                sucursal=sucursal,
                area_detectora=random.choice(['tecnico', 'calidad', 'recepcion']),
                tecnico_responsable=tecnico,
                inspector_calidad=inspector,
                tipo_incidencia=categoria,
                categoria_fallo=random.choice(categorias_fallo),
                grado_severidad=severidad,
                componente_afectado=componente,
                descripcion_incidencia=random.choice(descripciones_ejemplo),
                acciones_tomadas=random.choice(acciones_ejemplo),
                estado=estado,
                es_reincidencia=False
            )
            
            print(f"  ‚úÖ Creada: {incidencia.folio} - {marca} {tipo_equipo} ({severidad})")
            
        except Exception as e:
            print(f"  ‚ùå Error creando incidencia: {e}")
    
    print(f"‚úÖ Total de incidencias: {Incidencia.objects.count()}\n")


def main():
    """
    Funci√≥n principal
    """
    print("=" * 70)
    print("üéØ SCRIPT DE POBLACI√ìN - SCORE CARD")
    print("=" * 70)
    print()
    
    try:
        crear_categorias()
        crear_componentes()
        crear_incidencias_ejemplo()
        
        print("=" * 70)
        print("‚úÖ PROCESO COMPLETADO EXITOSAMENTE")
        print("=" * 70)
        print()
        print("üìä Resumen:")
        print(f"   - Categor√≠as: {CategoriaIncidencia.objects.count()}")
        print(f"   - Componentes: {ComponenteEquipo.objects.count()}")
        print(f"   - Incidencias: {Incidencia.objects.count()}")
        print(f"   - Empleados disponibles: {Empleado.objects.count()}")
        print(f"   - Sucursales disponibles: {Sucursal.objects.count()}")
        print()
        print("üåê Accede al Score Card en:")
        print("   http://localhost:8000/scorecard/")
        print()
        print("üëâ Accede al admin en:")
        print("   http://localhost:8000/admin/")
        print()
        
    except Exception as e:
        print(f"\n‚ùå ERROR: {e}")
        import traceback
        traceback.print_exc()
        sys.exit(1)


if __name__ == '__main__':
    main()
