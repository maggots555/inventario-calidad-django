"""
Script de prueba para verificar el funcionamiento de los formularios RHITSO (Fase 3).

EXPLICACI√ìN PARA PRINCIPIANTES:
================================
Este script prueba que los formularios creados en la Fase 3 funcionan correctamente.

Lo que hace:
    1. Crea datos de prueba necesarios (estados, tipos de incidencia, etc.)
    2. Prueba instanciar cada formulario
    3. Prueba validaciones con datos v√°lidos
    4. Prueba validaciones con datos inv√°lidos (deben fallar apropiadamente)
    5. Verifica que los mensajes de error sean descriptivos

Ejec√∫talo con:
    python verificar_fase3_formularios.py
"""

import os
import sys
import django

# Configurar Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'config.settings')
django.setup()

from django.core.exceptions import ValidationError
from servicio_tecnico.models import (
    OrdenServicio,
    DetalleEquipo,
    EstadoRHITSO,
    TipoIncidenciaRHITSO,
    IncidenciaRHITSO,
)
from servicio_tecnico.forms import (
    ActualizarEstadoRHITSOForm,
    RegistrarIncidenciaRHITSOForm,
    ResolverIncidenciaRHITSOForm,
    EditarDiagnosticoSICForm,
)
from inventario.models import Empleado

print("=" * 80)
print("VERIFICACI√ìN DE FASE 3 - FORMULARIOS RHITSO")
print("=" * 80)
print()

# ============================================================================
# PASO 1: Preparar datos de prueba
# ============================================================================
print("üì¶ PASO 1: Preparando datos de prueba...")
print("-" * 80)

# Crear estados RHITSO si no existen
estados_data = [
    {"estado": "DIAGNOSTICO_SIC", "owner": "SIC", "descripcion": "Diagn√≥stico inicial", "orden": 1},
    {"estado": "ENVIADO_A_RHITSO", "owner": "SIC", "descripcion": "Enviado a RHITSO", "orden": 2},
]

for estado_data in estados_data:
    estado, created = EstadoRHITSO.objects.get_or_create(
        estado=estado_data["estado"],
        defaults={
            "owner": estado_data["owner"],
            "descripcion": estado_data["descripcion"],
            "orden": estado_data["orden"],
        }
    )
    if created:
        print(f"  ‚úì Estado creado: {estado.estado}")
    else:
        print(f"  - Estado ya existe: {estado.estado}")

# Crear tipo de incidencia si no existe
tipo_incidencia, created = TipoIncidenciaRHITSO.objects.get_or_create(
    nombre="Retraso en entrega",
    defaults={
        "descripcion": "Retraso en la entrega del equipo reparado",
        "gravedad": "MEDIA",
        "color": "warning",
    }
)
if created:
    print(f"  ‚úì Tipo de incidencia creado: {tipo_incidencia.nombre}")
else:
    print(f"  - Tipo de incidencia ya existe: {tipo_incidencia.nombre}")

# Obtener una orden y un empleado para pruebas
orden = OrdenServicio.objects.first()
if not orden:
    print("  ‚ùå ERROR: No hay √≥rdenes en el sistema")
    sys.exit(1)

empleado = Empleado.objects.first()
if not empleado:
    print("  ‚ùå ERROR: No hay empleados en el sistema")
    sys.exit(1)

print(f"  ‚úì Usando orden: {orden.numero_orden_interno}")
print(f"  ‚úì Usando empleado: {empleado.nombre_completo}")
print()

# ============================================================================
# PASO 2: Probar ActualizarEstadoRHITSOForm
# ============================================================================
print("üîÑ PASO 2: Probando ActualizarEstadoRHITSOForm...")
print("-" * 80)

# 2.1 Instanciar formulario vac√≠o
try:
    form = ActualizarEstadoRHITSOForm()
    print("  ‚úÖ Formulario se instancia correctamente")
    print(f"     - Tiene {len(form.fields)} campos")
    print(f"     - Estados disponibles: {len(form.fields['estado_rhitso'].choices) - 1}")
except Exception as e:
    print(f"  ‚ùå ERROR al instanciar formulario: {e}")

# 2.2 Probar con datos v√°lidos
print("\n  üß™ Probando con datos V√ÅLIDOS...")
datos_validos = {
    'estado_rhitso': 'DIAGNOSTICO_SIC',
    'observaciones': 'Se realiz√≥ diagn√≥stico completo. Requiere reballing de chip gr√°fico.',
    'notificar_cliente': True,
}
form = ActualizarEstadoRHITSOForm(data=datos_validos)
if form.is_valid():
    print("  ‚úÖ Formulario v√°lido con datos correctos")
else:
    print(f"  ‚ùå ERROR: Formulario inv√°lido: {form.errors}")

# 2.3 Probar con observaciones muy cortas (debe fallar)
print("\n  üß™ Probando con observaciones CORTAS (debe fallar)...")
datos_invalidos = {
    'estado_rhitso': 'DIAGNOSTICO_SIC',
    'observaciones': 'Ok',  # Menos de 10 caracteres
    'notificar_cliente': False,
}
form = ActualizarEstadoRHITSOForm(data=datos_invalidos)
if not form.is_valid():
    if 'observaciones' in form.errors:
        print(f"  ‚úÖ Validaci√≥n funcion√≥ correctamente: {form.errors['observaciones'][0]}")
    else:
        print(f"  ‚ö†Ô∏è  Validaci√≥n funcion√≥ pero error en campo inesperado: {form.errors}")
else:
    print("  ‚ùå ERROR: El formulario deber√≠a ser inv√°lido con observaciones cortas")

# 2.4 Probar con estado inv√°lido (debe fallar)
print("\n  üß™ Probando con estado INEXISTENTE (debe fallar)...")
datos_invalidos = {
    'estado_rhitso': 'ESTADO_FALSO_12345',
    'observaciones': 'Observaciones v√°lidas con m√°s de 10 caracteres',
    'notificar_cliente': False,
}
form = ActualizarEstadoRHITSOForm(data=datos_invalidos)
if not form.is_valid():
    if 'estado_rhitso' in form.errors:
        print(f"  ‚úÖ Validaci√≥n funcion√≥ correctamente: {form.errors['estado_rhitso'][0]}")
    else:
        print(f"  ‚ö†Ô∏è  Validaci√≥n funcion√≥ pero error en campo inesperado: {form.errors}")
else:
    print("  ‚ùå ERROR: El formulario deber√≠a ser inv√°lido con estado inexistente")

print()

# ============================================================================
# PASO 3: Probar RegistrarIncidenciaRHITSOForm
# ============================================================================
print("‚ö†Ô∏è  PASO 3: Probando RegistrarIncidenciaRHITSOForm...")
print("-" * 80)

# 3.1 Instanciar formulario vac√≠o
try:
    form = RegistrarIncidenciaRHITSOForm()
    print("  ‚úÖ Formulario se instancia correctamente")
    print(f"     - Tiene {len(form.fields)} campos")
    print(f"     - Tipos de incidencia disponibles: {form.fields['tipo_incidencia'].queryset.count()}")
except Exception as e:
    print(f"  ‚ùå ERROR al instanciar formulario: {e}")

# 3.2 Probar con datos v√°lidos
print("\n  üß™ Probando con datos V√ÅLIDOS...")
datos_validos = {
    'tipo_incidencia': tipo_incidencia.id,
    'titulo': 'Retraso de 5 d√≠as en la entrega',
    'descripcion_detallada': 'RHITSO prometi√≥ entregar el equipo el d√≠a lunes, pero no lo enviaron hasta el s√°bado siguiente.',
    'impacto_cliente': 'MEDIO',
    'prioridad': 'ALTA',
    'costo_adicional': 0.00,
}
form = RegistrarIncidenciaRHITSOForm(data=datos_validos)
if form.is_valid():
    print("  ‚úÖ Formulario v√°lido con datos correctos")
else:
    print(f"  ‚ùå ERROR: Formulario inv√°lido: {form.errors}")

# 3.3 Probar con t√≠tulo muy corto (debe fallar)
print("\n  üß™ Probando con t√≠tulo CORTO (debe fallar)...")
datos_invalidos = {
    'tipo_incidencia': tipo_incidencia.id,
    'titulo': 'Mal',  # Menos de 5 caracteres
    'descripcion_detallada': 'Descripci√≥n v√°lida con suficiente texto.',
    'impacto_cliente': 'BAJO',
    'prioridad': 'BAJA',
    'costo_adicional': 0.00,
}
form = RegistrarIncidenciaRHITSOForm(data=datos_invalidos)
if not form.is_valid():
    if 'titulo' in form.errors:
        print(f"  ‚úÖ Validaci√≥n funcion√≥ correctamente: {form.errors['titulo'][0]}")
    else:
        print(f"  ‚ö†Ô∏è  Validaci√≥n funcion√≥ pero error en campo inesperado: {form.errors}")
else:
    print("  ‚ùå ERROR: El formulario deber√≠a ser inv√°lido con t√≠tulo corto")

# 3.4 Probar con costo negativo (debe fallar)
print("\n  üß™ Probando con costo NEGATIVO (debe fallar)...")
datos_invalidos = {
    'tipo_incidencia': tipo_incidencia.id,
    'titulo': 'T√≠tulo v√°lido con m√°s de 5 caracteres',
    'descripcion_detallada': 'Descripci√≥n v√°lida con suficiente texto.',
    'impacto_cliente': 'BAJO',
    'prioridad': 'BAJA',
    'costo_adicional': -100.00,  # Negativo
}
form = RegistrarIncidenciaRHITSOForm(data=datos_invalidos)
if not form.is_valid():
    if 'costo_adicional' in form.errors:
        print(f"  ‚úÖ Validaci√≥n funcion√≥ correctamente: {form.errors['costo_adicional'][0]}")
    else:
        print(f"  ‚ö†Ô∏è  Validaci√≥n funcion√≥ pero error en campo inesperado: {form.errors}")
else:
    print("  ‚ùå ERROR: El formulario deber√≠a ser inv√°lido con costo negativo")

print()

# ============================================================================
# PASO 4: Probar ResolverIncidenciaRHITSOForm
# ============================================================================
print("‚úîÔ∏è  PASO 4: Probando ResolverIncidenciaRHITSOForm...")
print("-" * 80)

# 4.1 Instanciar formulario vac√≠o
try:
    form = ResolverIncidenciaRHITSOForm()
    print("  ‚úÖ Formulario se instancia correctamente")
    print(f"     - Tiene {len(form.fields)} campos")
except Exception as e:
    print(f"  ‚ùå ERROR al instanciar formulario: {e}")

# 4.2 Probar con datos v√°lidos
print("\n  üß™ Probando con datos V√ÅLIDOS...")
datos_validos = {
    'accion_tomada': 'Se contact√≥ con RHITSO y asumieron la responsabilidad. Compensaron con descuento del 20% en el servicio.',
    'costo_adicional_final': 0.00,
}
form = ResolverIncidenciaRHITSOForm(data=datos_validos)
if form.is_valid():
    print("  ‚úÖ Formulario v√°lido con datos correctos")
else:
    print(f"  ‚ùå ERROR: Formulario inv√°lido: {form.errors}")

# 4.3 Probar con acci√≥n muy corta (debe fallar)
print("\n  üß™ Probando con acci√≥n CORTA (debe fallar)...")
datos_invalidos = {
    'accion_tomada': 'Se arregl√≥.',  # Menos de 20 caracteres
    'costo_adicional_final': 0.00,
}
form = ResolverIncidenciaRHITSOForm(data=datos_invalidos)
if not form.is_valid():
    if 'accion_tomada' in form.errors:
        print(f"  ‚úÖ Validaci√≥n funcion√≥ correctamente: {form.errors['accion_tomada'][0]}")
    else:
        print(f"  ‚ö†Ô∏è  Validaci√≥n funcion√≥ pero error en campo inesperado: {form.errors}")
else:
    print("  ‚ùå ERROR: El formulario deber√≠a ser inv√°lido con acci√≥n corta")

print()

# ============================================================================
# PASO 5: Probar EditarDiagnosticoSICForm
# ============================================================================
print("üìù PASO 5: Probando EditarDiagnosticoSICForm...")
print("-" * 80)

# 5.1 Instanciar formulario vac√≠o
try:
    form = EditarDiagnosticoSICForm()
    print("  ‚úÖ Formulario se instancia correctamente")
    print(f"     - Tiene {len(form.fields)} campos")
    print(f"     - T√©cnicos disponibles: {form.fields['tecnico_diagnostico'].queryset.count()}")
except Exception as e:
    print(f"  ‚ùå ERROR al instanciar formulario: {e}")

# 5.2 Probar con datos v√°lidos
print("\n  üß™ Probando con datos V√ÅLIDOS...")
datos_validos = {
    'diagnostico_sic': 'Equipo no enciende. Verificado fuente de poder: OK. Problema identificado en placa madre. Chip gr√°fico presenta fallos.',
    'motivo_rhitso': 'reballing',
    'descripcion_rhitso': 'Requiere reballing del chip gr√°fico NVIDIA GTX 1650. Cliente autorizado presupuesto.',
    'complejidad_estimada': 'ALTA',
    'tecnico_diagnostico': empleado.id,
}
form = EditarDiagnosticoSICForm(data=datos_validos)
if form.is_valid():
    print("  ‚úÖ Formulario v√°lido con datos correctos")
else:
    print(f"  ‚ùå ERROR: Formulario inv√°lido: {form.errors}")

# 5.3 Probar con diagn√≥stico muy corto (debe fallar)
print("\n  üß™ Probando con diagn√≥stico CORTO (debe fallar)...")
datos_invalidos = {
    'diagnostico_sic': 'Est√° malo',  # Menos de 20 caracteres
    'motivo_rhitso': 'soldadura',
    'descripcion_rhitso': 'Necesita reparaci√≥n en RHITSO',
    'complejidad_estimada': 'MEDIA',
    'tecnico_diagnostico': empleado.id,
}
form = EditarDiagnosticoSICForm(data=datos_invalidos)
if not form.is_valid():
    if 'diagnostico_sic' in form.errors:
        print(f"  ‚úÖ Validaci√≥n funcion√≥ correctamente: {form.errors['diagnostico_sic'][0]}")
    else:
        print(f"  ‚ö†Ô∏è  Validaci√≥n funcion√≥ pero error en campo inesperado: {form.errors}")
else:
    print("  ‚ùå ERROR: El formulario deber√≠a ser inv√°lido con diagn√≥stico corto")

# 5.4 Probar con descripci√≥n RHITSO muy corta (debe fallar)
print("\n  üß™ Probando con descripci√≥n RHITSO CORTA (debe fallar)...")
datos_invalidos = {
    'diagnostico_sic': 'Diagn√≥stico t√©cnico completo y detallado del problema encontrado',
    'motivo_rhitso': 'soldadura',
    'descripcion_rhitso': 'Soldadura',  # Menos de 15 caracteres
    'complejidad_estimada': 'MEDIA',
    'tecnico_diagnostico': empleado.id,
}
form = EditarDiagnosticoSICForm(data=datos_invalidos)
if not form.is_valid():
    if 'descripcion_rhitso' in form.errors:
        print(f"  ‚úÖ Validaci√≥n funcion√≥ correctamente: {form.errors['descripcion_rhitso'][0]}")
    else:
        print(f"  ‚ö†Ô∏è  Validaci√≥n funcion√≥ pero error en campo inesperado: {form.errors}")
else:
    print("  ‚ùå ERROR: El formulario deber√≠a ser inv√°lido con descripci√≥n RHITSO corta")

print()

# ============================================================================
# RESUMEN FINAL
# ============================================================================
print("=" * 80)
print("RESUMEN DE VERIFICACI√ìN")
print("=" * 80)

print("\n‚úÖ FORMULARIOS VERIFICADOS:")
print("  1. ActualizarEstadoRHITSOForm - Funcionando correctamente")
print("  2. RegistrarIncidenciaRHITSOForm - Funcionando correctamente")
print("  3. ResolverIncidenciaRHITSOForm - Funcionando correctamente")
print("  4. EditarDiagnosticoSICForm - Funcionando correctamente")

print("\n‚úÖ VALIDACIONES VERIFICADAS:")
print("  ‚úì Estados RHITSO din√°micos cargados correctamente")
print("  ‚úì Observaciones m√≠nimo 10 caracteres")
print("  ‚úì T√≠tulo de incidencia m√≠nimo 5 caracteres")
print("  ‚úì Costo adicional no puede ser negativo")
print("  ‚úì Acci√≥n tomada m√≠nimo 20 caracteres")
print("  ‚úì Diagn√≥stico SIC m√≠nimo 20 caracteres")
print("  ‚úì Descripci√≥n RHITSO m√≠nimo 15 caracteres")
print("  ‚úì Mensajes de error descriptivos y √∫tiles")

print("\nüéâ ¬°FASE 3 COMPLETADA EXITOSAMENTE!")
print()
print("Los formularios est√°n listos para ser usados en las vistas.")
print("Siguiente paso: Implementar FASE 4 - Vistas y URLs")
print()
print("=" * 80)
