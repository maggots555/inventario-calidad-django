"""
Signals para el M√≥dulo RHITSO - Sistema de Seguimiento Especializado

EXPLICACI√ìN PARA PRINCIPIANTES:
================================
Los "signals" (se√±ales) en Django son como detectores autom√°ticos que observan
cuando algo cambia en la base de datos y ejecutan acciones autom√°ticamente.

Es como tener un asistente que est√° siempre atento y hace tareas por ti cuando
detecta ciertos eventos.

Ejemplo:
    Cuando cambias el estado_rhitso de una orden, el signal detecta ese cambio
    y autom√°ticamente crea un registro en la tabla SeguimientoRHITSO con toda
    la informaci√≥n del cambio (qui√©n lo hizo, cu√°ndo, qu√© estado anterior ten√≠a, etc.)

Beneficios:
    - No tienes que recordar crear registros manualmente en cada vista
    - El historial es completo y confiable
    - El c√≥digo est√° en un solo lugar (m√°s f√°cil de mantener)
    - Funciona autom√°ticamente sin importar d√≥nde se haga el cambio

Este archivo contiene 2 signals principales:
    1. tracking_cambio_estado_rhitso - Detecta cambios en estado_rhitso
    2. registrar_incidencia_critica - Detecta incidencias con gravedad CRITICA
"""

from django.db.models.signals import post_save, pre_save
from django.dispatch import receiver
from django.utils import timezone
from .models import (
    OrdenServicio,
    IncidenciaRHITSO,
    SeguimientoRHITSO,
    EstadoRHITSO,
    HistorialOrden
)


# ============================================================================
# SIGNAL 1: TRACKING AUTOM√ÅTICO DE CAMBIOS EN ESTADO_RHITSO
# ============================================================================

# EXPLICACI√ìN T√âCNICA: ¬øPor qu√© necesitamos pre_save Y post_save?
# =================================================================
# pre_save: Se ejecuta ANTES de guardar. Aqu√≠ guardamos el valor anterior
#           en una variable temporal del objeto (instance._estado_rhitso_anterior)
# post_save: Se ejecuta DESPU√âS de guardar. Aqu√≠ usamos ese valor guardado
#            para crear el registro de seguimiento

@receiver(pre_save, sender=OrdenServicio)
def guardar_estado_rhitso_anterior(sender, instance, **kwargs):
    """
    PRE-SAVE: Guarda el valor anterior de estado_rhitso antes de guardar.
    
    EXPLICACI√ìN PARA PRINCIPIANTES:
    ================================
    Este signal se ejecuta ANTES (pre_save) de que se guarde la OrdenServicio.
    
    ¬øQu√© hace?
        Busca el valor actual de estado_rhitso en la base de datos y lo guarda
        en una variable temporal del objeto (_estado_rhitso_anterior).
        
        Esto es necesario porque en post_save ya no podemos saber qu√© valor
        ten√≠a antes, porque ya se guard√≥ el nuevo valor.
    
    ¬øPor qu√© usar una variable temporal?
        Django nos permite agregar atributos temporales a un objeto con el
        prefijo underscore (_). Estos no se guardan en la BD, solo existen
        durante la ejecuci√≥n.
    """
    # Si la orden ya existe en la BD (tiene pk), buscar el valor anterior
    if instance.pk:
        try:
            orden_anterior = OrdenServicio.objects.get(pk=instance.pk)
            # Guardar el valor anterior en una variable temporal
            instance._estado_rhitso_anterior = orden_anterior.estado_rhitso
        except OrdenServicio.DoesNotExist:
            # Si no existe (raro), marcar como None
            instance._estado_rhitso_anterior = None
    else:
        # Si es una orden nueva, no hay estado anterior
        instance._estado_rhitso_anterior = None


@receiver(post_save, sender=OrdenServicio)
def tracking_cambio_estado_rhitso(sender, instance, created, **kwargs):
    """
    POST-SAVE: Detecta cambios en estado_rhitso y crea registro de seguimiento.
    
    EXPLICACI√ìN PARA PRINCIPIANTES:
    ================================
    Este signal se ejecuta DESPU√âS (post_save) de que se guarda una OrdenServicio.
    
    ¬øQu√© hace?
        1. Obtiene el valor anterior de estado_rhitso (guardado en pre_save)
        2. Compara con el valor actual
        3. Si cambi√≥, crea un registro en SeguimientoRHITSO con toda la info
        4. Tambi√©n registra el cambio en el HistorialOrden general
    
    Par√°metros:
        sender: La clase del modelo (OrdenServicio)
        instance: La orden que se acaba de guardar
        created: True si es una orden nueva, False si se est√° actualizando
        **kwargs: Otros par√°metros que Django pasa autom√°ticamente
    """
    
    # Si la orden se acaba de crear Y tiene estado_rhitso
    if created:
        if instance.estado_rhitso:
            try:
                estado_obj = EstadoRHITSO.objects.get(estado=instance.estado_rhitso)
                SeguimientoRHITSO.objects.create(
                    orden=instance,
                    estado=estado_obj,
                    estado_anterior='',
                    observaciones='Estado RHITSO inicial al crear la orden',
                    usuario_actualizacion=None,  # Sistema
                    tiempo_en_estado_anterior=None,
                    notificado_cliente=False,
                    es_cambio_automatico=True  # üîß MARCADO COMO AUTOM√ÅTICO
                )
                
                # Registrar en historial general
                HistorialOrden.objects.create(
                    orden=instance,
                    tipo_evento='sistema',
                    comentario=f'üÜï Estado RHITSO inicial: {instance.estado_rhitso}',
                    es_sistema=True
                )
            except EstadoRHITSO.DoesNotExist:
                pass
        return
    
    # Para √≥rdenes que se est√°n actualizando, verificar si cambi√≥ estado_rhitso
    estado_anterior = getattr(instance, '_estado_rhitso_anterior', None)
    estado_actual = instance.estado_rhitso
    
    # Si no cambi√≥ o est√° vac√≠o, no hacer nada
    if not estado_actual or estado_actual == estado_anterior:
        return
    
    # ¬°El estado cambi√≥! Vamos a registrarlo
    
    # 1. Buscar el √∫ltimo seguimiento para calcular tiempo en estado anterior
    ultimo_seguimiento = SeguimientoRHITSO.objects.filter(
        orden=instance
    ).order_by('-fecha_actualizacion').first()
    
    tiempo_en_estado_anterior = None
    if ultimo_seguimiento:
        # Calcular d√≠as desde el √∫ltimo cambio hasta ahora
        delta = timezone.now() - ultimo_seguimiento.fecha_actualizacion
        tiempo_en_estado_anterior = delta.days
    
    # 2. Buscar el objeto EstadoRHITSO correspondiente
    try:
        estado_obj = EstadoRHITSO.objects.get(estado=estado_actual)
    except EstadoRHITSO.DoesNotExist:
        # Si el estado no existe en el cat√°logo, no podemos crear el seguimiento
        return
    
    # 3. Crear el registro de seguimiento
    SeguimientoRHITSO.objects.create(
        orden=instance,
        estado=estado_obj,
        estado_anterior=estado_anterior or '(Sin estado previo)',
        observaciones=f'Cambio autom√°tico de estado detectado por el sistema',
        usuario_actualizacion=None,  # None = Sistema autom√°tico
        tiempo_en_estado_anterior=tiempo_en_estado_anterior,
        notificado_cliente=False,
        es_cambio_automatico=True  # üîß MARCADO COMO AUTOM√ÅTICO
    )
    
    # 4. Registrar tambi√©n en el HistorialOrden general
    HistorialOrden.objects.create(
        orden=instance,
        tipo_evento='sistema',
        comentario=f'üîÑ Estado RHITSO cambiado: {estado_anterior or "(ninguno)"} ‚Üí {estado_actual}',
        es_sistema=True
    )
    
    # 5. Limpiar la variable temporal (buena pr√°ctica)
    if hasattr(instance, '_estado_rhitso_anterior'):
        delattr(instance, '_estado_rhitso_anterior')


# ============================================================================
# SIGNAL 2: ALERTAR CUANDO SE REGISTRA UNA INCIDENCIA CR√çTICA
# ============================================================================

@receiver(post_save, sender=IncidenciaRHITSO)
def registrar_incidencia_critica(sender, instance, created, **kwargs):
    """
    Signal que detecta cuando se crea una incidencia con gravedad CRITICA.
    
    EXPLICACI√ìN PARA PRINCIPIANTES:
    ================================
    Este signal se ejecuta DESPU√âS (post_save) de que se guarda una IncidenciaRHITSO.
    
    ¬øQu√© hace?
        Solo cuando se CREA una incidencia nueva (no al actualizarla) y si su
        tipo_incidencia tiene gravedad CRITICA, registra autom√°ticamente un evento
        en el HistorialOrden para que todos vean que hay un problema grave.
    
    ¬øPor qu√© es √∫til?
        Las incidencias cr√≠ticas (como da√±o adicional causado por RHITSO o retrasos
        graves) deben ser visibles inmediatamente en el historial principal de la
        orden, no solo en la secci√≥n de incidencias.
    
    Par√°metros:
        sender: La clase del modelo (IncidenciaRHITSO)
        instance: La incidencia que se acaba de guardar
        created: True si es nueva, False si se est√° actualizando
        **kwargs: Otros par√°metros de Django
    """
    
    # Solo procesar cuando se CREA una incidencia nueva
    if not created:
        return
    
    # Verificar si la incidencia es de gravedad CRITICA
    # El campo tipo_incidencia es una ForeignKey a TipoIncidenciaRHITSO
    # que tiene el campo gravedad
    if instance.tipo_incidencia.gravedad == 'CRITICA':
        # Crear un evento en el historial de la orden
        HistorialOrden.objects.create(
            orden=instance.orden,
            tipo_evento='sistema',
            comentario=f'‚ö†Ô∏è INCIDENCIA CR√çTICA REGISTRADA: {instance.titulo}\n'
                      f'Impacto al cliente: {instance.get_impacto_cliente_display()}\n'
                      f'Prioridad: {instance.get_prioridad_display()}',
            es_sistema=True
        )
        
        # NOTA: Aqu√≠ podr√≠as agregar m√°s l√≥gica como:
        # - Enviar un email al responsable
        # - Crear una notificaci√≥n en el sistema
        # - Actualizar alg√∫n indicador de alerta
        # Por ahora solo registramos en el historial


# ============================================================================
# SIGNAL 3 (OPCIONAL): PRE-SAVE PARA VALIDACIONES ADICIONALES
# ============================================================================

# Este es un ejemplo de c√≥mo usar pre_save si necesitas hacer algo
# ANTES de que se guarde el objeto en la base de datos

# @receiver(pre_save, sender=OrdenServicio)
# def validar_antes_guardar(sender, instance, **kwargs):
#     """
#     Este signal se ejecutar√≠a ANTES de guardar la orden.
#     √ötil para validaciones o c√°lculos que afectan el objeto mismo.
#     """
#     pass


# ============================================================================
# NOTAS PARA EL FUTURO
# ============================================================================

"""
POSIBLES MEJORAS A IMPLEMENTAR:

1. Notificaciones Autom√°ticas:
   - Cuando cambia estado_rhitso, enviar email/SMS al cliente
   - Integrar con sistema de notificaciones del proyecto
   
2. Webhooks:
   - Notificar a sistemas externos cuando hay cambios importantes
   - Integrar con API de RHITSO para sincronizaci√≥n
   
3. M√©tricas Autom√°ticas:
   - Calcular KPIs en tiempo real
   - Actualizar dashboards autom√°ticamente
   
4. Validaciones Complejas:
   - Verificar que los cambios de estado sigan un flujo l√≥gico
   - Prevenir cambios no autorizados
   
5. Auditor√≠a Avanzada:
   - Registrar IP del usuario que hace el cambio
   - Guardar snapshot completo del objeto antes del cambio
"""
