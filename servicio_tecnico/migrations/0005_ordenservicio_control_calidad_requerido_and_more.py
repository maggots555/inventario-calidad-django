# Generated by Django 5.2.5 on 2025-10-09 04:24

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from decimal import Decimal
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('scorecard', '0008_remove_old_servicio_field'),
        ('servicio_tecnico', '0004_seguimientopieza_piezas'),
    ]

    operations = [
        migrations.AddField(
            model_name='ordenservicio',
            name='control_calidad_requerido',
            field=models.BooleanField(default=False, help_text='¿Requiere pasar por control de calidad? (Opcional para ventas simples como accesorios)'),
        ),
        migrations.AddField(
            model_name='ordenservicio',
            name='monto_abono_previo',
            field=models.DecimalField(decimal_places=2, default=Decimal('0.00'), help_text='Monto a abonar por servicio de venta mostrador previo', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))]),
        ),
        migrations.AddField(
            model_name='ordenservicio',
            name='notas_conversion',
            field=models.TextField(blank=True, help_text='Motivo y detalles de conversión de venta mostrador a diagnóstico'),
        ),
        migrations.AddField(
            model_name='ordenservicio',
            name='orden_venta_mostrador_previa',
            field=models.ForeignKey(blank=True, help_text='Orden de venta mostrador que se convirtió a diagnóstico (si aplica)', null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='orden_diagnostico_posterior', to='servicio_tecnico.ordenservicio'),
        ),
        migrations.AddField(
            model_name='ordenservicio',
            name='tipo_servicio',
            field=models.CharField(choices=[('diagnostico', 'Con Diagnóstico Técnico'), ('venta_mostrador', 'Venta Mostrador - Sin Diagnóstico')], default='diagnostico', help_text='Tipo de servicio: con diagnóstico técnico o venta mostrador directa', max_length=20),
        ),
        migrations.AddField(
            model_name='ventamostrador',
            name='genera_comision',
            field=models.BooleanField(default=False, help_text='¿Esta venta genera comisión para el responsable? (Paquetes siempre generan)'),
        ),
        migrations.AlterField(
            model_name='ordenservicio',
            name='estado',
            field=models.CharField(choices=[('espera', 'En Espera'), ('recepcion', 'En Recepción'), ('diagnostico', 'En Diagnóstico'), ('cotizacion', 'Esperando Aprobación Cliente'), ('rechazada', 'Cotización Rechazada'), ('esperando_piezas', 'Esperando Llegada de Piezas'), ('reparacion', 'En Reparación'), ('control_calidad', 'Control de Calidad'), ('finalizado', 'Finalizado - Listo para Entrega'), ('entregado', 'Entregado al Cliente'), ('cancelado', 'Cancelado'), ('convertida_a_diagnostico', 'Convertida a Diagnóstico')], default='espera', help_text='Estado actual de la orden', max_length=30),
        ),
        migrations.AlterField(
            model_name='ventamostrador',
            name='paquete',
            field=models.CharField(choices=[('premium', 'Solución Premium'), ('oro', 'Solución Oro'), ('plata', 'Solución Plata'), ('ninguno', 'Sin Paquete')], default='ninguno', help_text='Paquete de servicio adicional', max_length=10),
        ),
        migrations.CreateModel(
            name='PiezaVentaMostrador',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('descripcion_pieza', models.CharField(help_text='Descripción de la pieza (ej: RAM 8GB DDR4 Kingston, Cable HDMI 2m)', max_length=200)),
                ('cantidad', models.PositiveIntegerField(default=1, help_text='Cantidad vendida', validators=[django.core.validators.MinValueValidator(1)])),
                ('precio_unitario', models.DecimalField(decimal_places=2, help_text='Precio unitario de venta (IVA incluido)', max_digits=10, validators=[django.core.validators.MinValueValidator(Decimal('0.00'))])),
                ('fecha_venta', models.DateTimeField(default=django.utils.timezone.now, help_text='Fecha de venta de la pieza')),
                ('notas', models.TextField(blank=True, help_text='Notas u observaciones sobre la pieza vendida')),
                ('componente', models.ForeignKey(blank=True, help_text='Componente del catálogo ScoreCard (opcional)', null=True, on_delete=django.db.models.deletion.SET_NULL, to='scorecard.componenteequipo')),
                ('venta_mostrador', models.ForeignKey(help_text='Venta mostrador a la que pertenece esta pieza', on_delete=django.db.models.deletion.CASCADE, related_name='piezas_vendidas', to='servicio_tecnico.ventamostrador')),
            ],
            options={
                'verbose_name': 'Pieza Venta Mostrador',
                'verbose_name_plural': 'Piezas Venta Mostrador',
                'ordering': ['-fecha_venta'],
                'indexes': [models.Index(fields=['-fecha_venta'], name='servicio_te_fecha_v_155d22_idx'), models.Index(fields=['venta_mostrador'], name='servicio_te_venta_m_cc9a90_idx')],
            },
        ),
    ]
